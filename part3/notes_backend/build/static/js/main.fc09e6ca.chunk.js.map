{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","axios","get","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","then","response","data","notesToShow","filter","map","find","n","changedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","console","log","target","noteObject","date","Date","Math","random","concat","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"6JAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,+BACGH,EAAKI,QACN,wBAAQC,QAASJ,EAAjB,SAAoCC,Q,gBCNpCI,EAAU,aAcD,EAZA,WACb,OAAOC,IAAMC,IAAIF,IAWJ,EARA,SAACG,GACd,OAAOF,IAAMG,KAAKJ,EAASG,IAOd,EAJA,SAACE,EAAIF,GAClB,OAAOF,IAAMK,IAAN,UAAaN,EAAb,YAAwBK,GAAMF,ICgExBI,EAzEH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WACRC,IAAqBC,MAAK,SAACC,GACzBR,EAASQ,EAASC,WAEnB,IAEH,IAmCMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAC3B,GAAD,OAAUA,EAAKG,aAElE,OACE,gCACE,uCACA,8BACE,yBAAQE,QAAS,kBAAMe,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYE,KAAI,SAAC5B,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAlDD,SAACU,GAC1B,IAAMX,EAAOe,EAAMc,MAAK,SAACC,GAAD,OAAOA,EAAEnB,KAAOA,KAClCoB,EAAW,2BAAQ/B,GAAR,IAAcG,WAAYH,EAAKG,YAEhDmB,EACUX,EAAIoB,GACXR,MAAK,SAACC,GACLR,EAASD,EAAMa,KAAI,SAAC5B,GAAD,OAAWA,EAAKW,KAAOA,EAAKX,EAAOwB,EAASC,YAEhEO,OAAM,SAACC,GACNC,MAAM,SAAD,OAAUlC,EAAKI,QAAf,sCACLY,EAASD,EAAMY,QAAO,SAAC3B,GAAD,OAAUA,EAAKW,KAAOA,SAuChBwB,CAAmBnC,EAAKW,MAF3CX,EAAKW,SAMhB,uBAAMyB,SAvCM,SAACC,GACfA,EAAMC,iBACNC,QAAQC,IAAI,iBAAkBH,EAAMI,QACpC,IAAMC,EAAa,CACjBtC,QAASa,EACT0B,KAAM,IAAIC,KACVzC,UAAW0C,KAAKC,SAAW,IAG7BxB,EAAmBoB,GAAYnB,MAAK,SAACC,GACnCR,EAASD,EAAMgC,OAAOvB,EAASC,OAC/BP,EAAW,QA4BX,UACE,uBAAO8B,MAAO/B,EAASgC,SAzBJ,SAACZ,GACxBE,QAAQC,IAAI,WAAYH,EAAMI,OAAOO,OACrC9B,EAAWmB,EAAMI,OAAOO,UAwBpB,wBAAQE,KAAK,SAAb,yBCpERC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.fc09e6ca.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\n\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  return axios.get(baseUrl);\n};\n\nconst create = (newObject) => {\n  return axios.post(baseUrl, newObject);\n};\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject);\n};\n\nexport default { getAll, create, update };\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n\n  useEffect(() => {\n    noteService.getAll().then((response) => {\n      setNotes(response.data);\n    });\n  }, []);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((response) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : response.data)));\n      })\n      .catch((error) => {\n        alert(`Note '${note.content}' was already removed from server`);\n        setNotes(notes.filter((note) => note.id !== id));\n      });\n  };\n\n  const addNote = (event) => {\n    event.preventDefault();\n    console.log(\"button clicked\", event.target);\n    const noteObject = {\n      content: newNote,\n      date: new Date(),\n      important: Math.random() < 0.5,\n    };\n\n    noteService.create(noteObject).then((response) => {\n      setNotes(notes.concat(response.data));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(\"new note\", event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}